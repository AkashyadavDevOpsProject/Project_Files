pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_PROJECT = 'devops-practices-2025'
        AWS_LOCATION = 'us-central1'
        AWS_REPO = 'springbootdockerrepo'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Programmerdevops/spring-boot-mongo-docker.git', credentialsId: 'git-cred'
            }
        }

        stage('Init Variables') {
            steps {
                script {
                    def branchName = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    env.BRANCH_NAME = branchName
                    env.BUILD_TAG = "${branchName}-${env.BUILD_NUMBER}"
                    env.DOCKER_IMAGE = "${env.AWS_LOCATION}-docker.pkg.dev/${env.AWS_PROJECT}/${env.AWS_REPO}/spring-boot-mongo:${env.BUILD_TAG}"
                }
            }
        }

        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('File System Scan') {
            steps {
                sh 'trivy fs --format table -o trivy-fs-report.html .'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=spring-boot-mongo \
                        -Dsonar.projectKey=spring-boot-mongo \
                        -Dsonar.java.binaries=.
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Publish To Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3') {
                    sh 'mvn deploy'
                }
            }
        }

        stage('Build & Tag Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html ${DOCKER_IMAGE}"
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                sh "docker push ${DOCKER_IMAGE}"
            }
        }

        stage('Update K8s Manifest and Push to Git') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'git-cred', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    sh """
                        sed -i 's|image: .*/spring-boot-mongo:.*|image: ${DOCKER_IMAGE}|' deployment-service.yaml
                        git config --global user.email "yadav.akash6969@gmail.com"
                        git config --global user.name "Programmerdevops"
                        git remote set-url origin https://${GIT_USER}:${GIT_TOKEN}@github.com/Programmerdevops/spring-boot-mongo-docker.git
                        git add deployment-service.yaml
                        git commit -m "Update Docker image to ${DOCKER_IMAGE}" || echo "No changes to commit"
                        git push origin ${BRANCH_NAME}
                    """
                }
            }
        }

        stage('Deploy To Kubernetes') {
            steps {
                withKubeConfig(
                    credentialsId: 'k8-cred',
                    clusterName: 'gke_devops-practices-2025_us-central1_cluster-1',
                    namespace: 'webapps',
                    serverUrl: 'https://104.197.145.112'
                ) {
                    sh 'kubectl apply -f deployment-service.yaml'
                }
            }
        }

        stage('Verify the Deployment') {
            steps {
                withKubeConfig(
                    credentialsId: 'k8-cred',
                    clusterName: 'gke_devops-practices-2025_us-central1_cluster-1',
                    namespace: 'webapps',
                    serverUrl: 'https://104.197.145.112'
                ) {
                    sh 'kubectl get pods -n webapps'
                    sh 'kubectl get svc -n webapps'
                }
            }
        }
    }
}